// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Main model for all types of listings
model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  location    String
  address     String
  city        String
  type        String   // hostel, PG, flat, mess
  amenities   String[]
  images      String[]
  contactName String
  contactPhone String
  contactEmail String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coordinates Coordinates?
  metadata    Json?    // Stores additional type-specific data
  
  // Relations
  ownerId     String?  @db.ObjectId
  owner       User?    @relation(fields: [ownerId], references: [id])
  reviews     Review[] @relation("ListingReviews")
  bookmarks   Bookmark[]
  bookings    Booking[]
}

// User model for authentication and user profiles
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  passwordHash  String?
  phoneNumber   String?
  profileImage  String?
  role          String   @default("user") // user, owner, admin
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  listings      Listing[]
  reviews       Review[]
  bookmarks     Bookmark[]
  bookings      Booking[]
}

// Reviews for listings
model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  rating        Float
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  listingId     String   @db.ObjectId
  listing       Listing  @relation("ListingReviews", fields: [listingId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Bookmarks/Favorites
model Bookmark {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  
  // Relations
  listingId     String   @db.ObjectId
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure a user can only bookmark a listing once
  @@unique([userId, listingId])
}

// Booking/Inquiry model
model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  status        String   @default("pending") // pending, confirmed, cancelled, completed
  checkInDate   DateTime?
  checkOutDate  DateTime?
  guestCount    Int?
  totalAmount   Float?
  message       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  listingId     String   @db.ObjectId
  listing       Listing  @relation(fields: [listingId], references: [id])
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
}

// Type for storing coordinates
type Coordinates {
  latitude  Float
  longitude Float
}
